#!/usr/bin/python3

from collect import realtime, past
from visualize import graph
import argparse
import sys

if len(sys.argv) < 2:
	print_help()
	exit(-1)


parser = argparse.ArgumentParser(description='A BGP collection')

subparsers = parser.add_subparsers(help='What to do with that BGP data ?')

# Parser for follow command
parser_follow = subparsers.add_parser('follow', help='Collect BGP data in real time')
parser_follow.add_argument('--save-rate', default=30, type=int, help='Saving rate, in minutes (Default 30 min)')
parser_follow.add_argument('--output-folder', default=".", type=str, help='Output folder (defaults to current folder)')
parser_follow.set_defaults(func=realtime.do_collection)

parser_past = subparsers.add_parser('past', help='Collect Historical BGP data')
parser_past.add_argument('--start', required=True, type=int, help='Starting timestamp')
parser_past.add_argument('--stop', type=int, help='Stopping timestamp')
parser_past.add_argument('--period', default=60*8, type=int, help='Record period, in minutes (Defaults to 8 hours))')
parser_past.add_argument('--save-rate', default=30, type=int, help='Saving rate, in minutes (Default 30 min)')
parser_past.add_argument('--output-folder', default=".", type=str, help='Output folder (defaults to current folder)')
parser_past.set_defaults(func=past.do_collection)

parser_stats = subparsers.add_parser('stats', help='Display stats on the data')
parser_stats.add_argument('file', type=str, help='Input file')
parser_stats.set_defaults(func=graph.do_stats)

parser_adjimg = subparsers.add_parser('adjimg', help='Display the adjacency matrix of the graph')
parser_adjimg.add_argument('file', type=str, help='Input file')
parser_adjimg.add_argument('--output-file', type=str, help='Save figure to file')
parser_adjimg.add_argument('--degree-display', type=int, help='Display ASN on nodes with degree greater than this value')
parser_adjimg.add_argument('--dpi', default=300, type=int, help='Save figure to file')
parser_adjimg.set_defaults(func=graph.do_adjimg)

parser_graph = subparsers.add_parser('graph', help='Display a graph of the data')
parser_graph.add_argument('file', type=str, help='Input file')
parser_graph.add_argument('--output-file', type=str, help='Save figure to file')
parser_graph.add_argument('--degree-display', type=int, help='Display ASN on nodes with degree greater than this value')
parser_graph.add_argument('--dpi', default=300, type=int, help='Save figure to file')
parser_graph.set_defaults(func=graph.do_graph)


args = parser.parse_args()
args.func(args)
